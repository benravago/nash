ClassReader.java:32://  if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V14) {
ClassWriter.java:67:    if (compute == MethodWriter.COMPUTE_MAX_STACK_AND_LOCAL) { // (version & 0xFFFF) >= Opcodes.V1_7
ClassWriter.java:204:    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && false) { // (version & 0xFFFF) < Opcodes.V1_5)
ClassWriter.java:260:    int mask = 0; // (version & 0xFFFF) < Opcodes.V1_5 ? Opcodes.ACC_SYNTHETIC : 0;
ClassWriter.java:292:    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && false) { // (version & 0xFFFF) < Opcodes.V1_5) {
FieldWriter.java:49:    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && false) { // symbolTable.getMajorVersion() < Opcodes.V1_5) {
FieldWriter.java:72:    boolean useSyntheticAttribute = false; // symbolTable.getMajorVersion() < Opcodes.V1_5;
MethodWriter.java:1327:    if (false) { // symbolTable.getMajorVersion() < Opcodes.V1_6) {
MethodWriter.java:1434:    boolean needSyntheticAttribute = false // symbolTable.getMajorVersion() < Opcodes.V1_5
MethodWriter.java:1478:        boolean useStackMapTable = true; // symbolTable.getMajorVersion() >= Opcodes.V1_6;
MethodWriter.java:1506:    boolean useSyntheticAttribute = false; // symbolTable.getMajorVersion() < Opcodes.V1_5;
MethodWriter.java:1535:    boolean useSyntheticAttribute = false; // symbolTable.getMajorVersion() < Opcodes.V1_5;
MethodWriter.java:1605:        boolean useStackMapTable = true; // symbolTable.getMajorVersion() >= Opcodes.V1_6;
